#!/bin/bash

#
# Authselect Autodiscovery - SSSD
# ===============================
#
# This script autogenerates the sssd extension.

set -e
umask 0007


#
# Select the sssd profile
# -----------------------
#
# If the profile is sssd, set that profile.

if [ -L "/etc/device/system/auth/profile" ]; then

  profile=$(basename $(realpath "/etc/device/system/auth/profile"))

  if [ "${profile}" != "sssd" ]; then

    # skip if not sssd
    exit 0

  fi

else

  # skip if nothing
  exit 0

fi


#
# Build sssd options
# ------------------

line="/etc/device/system/auth/sssd"

option=""
smartcard=""

if [ -f "$line/with-faillock.bin" ]; then
  option+=" with-faillock"
fi
if [ -f "$line/with-mkhomedir.bin" ]; then
  option+=" with-mkhomedir"
fi
if [ -f "$line/with-smartcard.bin" ]; then
  option+=" with-smartcard"
  smartcard="true"
fi
if [ -f "$line/smartcard/lock-on-removal.bin" ]; then
  option+=" with-smartcard-lock-on-removal"
fi
if [ -f "$line/smartcard/required.bin" ]; then
  option+=" with-smartcard-required"
fi
if [ -f "$line/with-fingerprint.bin" ]; then
  option+=" with-fingerprint"
fi
if [ -f "$line/with-pam-u2f.bin" ]; then
  option+=" with-pam-u2f"
fi
if [ -f "$line/with-pam-u2f-2fa.bin" ]; then
  option+=" with-pam-u2f-2fa"
fi
if [ -f "$line/without-pam-u2f-nouserok.bin" ]; then
  option+=" without-pam-u2f-nouserok"
fi
if [ -f "$line/with-sudo.bin" ]; then
  option+=" with-sudo"
fi

if test "$line/smartcard/ca-certificate.crt"; then

  rm -f "/run/sssd_auth_ca_db.yaml"
  rm -f "/run/sssd_auth_ca_db.pem"

  logger -t authselect-autodiscovery "requesting sssd smartcard ca-certificate..."

  redwax-tool --trust-pem-in="$line/smartcard/ca-certificate.crt" \
              --no-cert-out --no-chain-out --root-out \
              --pem-out=/run/sssd_auth_ca_db.pem \
              --metadata-out="/run/sssd_auth_ca_db.yaml"

  logger -t authselect-autodiscovery "requested sssd smartcard ca-certificate."

fi

/usr/bin/authselect select sssd ${option} --force | /usr/bin/logger -t "${0}"

logger -t authselect-autodiscovery "authselect select sssd ${option}"


#
# Configure sudoers
# -----------------
#
# Make sure we can become root without a password.

cat > /etc/sudoers.d/device-wheel <<- EOF
# Generated by $0 on `date`
# DO NOT MODIFY THIS FILE - it will be overwritten on server restart.
#
%wheel        ALL=(ALL)       NOPASSWD: ALL
EOF


#
# sssd.conf
# ---------

logger -t "${0}" "Notice: Creating sssd sssd.conf..."

cat >> sssd.conf <<- EOF
# Generated by $0 on `date`
# DO NOT MODIFY THIS FILE - it will be overwritten on server restart.
#
EOF

if [ -f sssd-domains.conf ]; then
  domains="$(head -n 1 sssd-domains.conf)"

  if [ -n "$smartcard" -a -f "/run/sssd_auth_ca_db.pem" ]; then
    cat >> sssd.conf <<- EOF
[sssd]
services = nss, pam, ssh, sudo, autofs
domains = ${domains}

[nss]
homedir_substring = /home

[pam]
pam_cert_auth = True
pam_cert_db_path = /run/sssd_auth_ca_db.pem

[sudo]

EOF
  else
    cat >> sssd.conf <<- EOF
[sssd]
services = nss, pam, ssh, sudo, autofs
domains = ${domains}

[nss]
homedir_substring = /home

[pam]

[sudo]

EOF
  fi
else
  cat >> sssd.conf <<- EOF
[sssd]
services = nss, pam, ssh, sudo, autofs
domains = files
EOF
fi

# add files domain
cat > files.conf <<- EOF
# Generated by $0 on `date`
# DO NOT MODIFY THIS FILE - it will be overwritten on server restart.
#

EOF

cat >> files.conf <<- EOF
[domain/files]
id_provider = files
EOF

# special permissions required for sssd to start
install -m 600 -o root -g root "sssd.conf" "/etc/sssd/sssd.conf"

install -m 600 -o root -g root "files.conf" "/etc/sssd/conf.d/files.conf"

